#!/bin/sh

# Define variables for reusability
SECRET_FILE="../secret"
REPO_URL="https://mungert69:`cat $SECRET_FILE`@github.com/Mungert69/NetworkMonitorApi"
DOCKER_COMPOSE_FILE="$HOME/code/NetworkMonitor/docker-compose-run-api.yml"
CONTAINER_NAME="api"

# Extract the image name from the docker-compose file (without the tag)
DOCKER_IMAGE_FULL=$(grep 'image:' $DOCKER_COMPOSE_FILE | awk '{ print $2 }')
DOCKER_IMAGE_NAME=$(echo $DOCKER_IMAGE_FULL | cut -d':' -f1)  # Extracts only the name, without the tag
DOCKER_IMAGE_TAG=$(echo $DOCKER_IMAGE_FULL | cut -d':' -f2)  # Extracts only the tag, without the name
echo "Docker Image Full is $DOCKER_IMAGE_FULL . Name is $DOCKER_IMAGE_NAME ."
# Step 1: Pull the latest code from GitHub
if ! git pull "$REPO_URL"; then
    echo "Failed to pull from GitHub repository. Exiting..."
    exit 1
fi

# Step 2: Build and publish the Docker container
if ! dotnet publish NetworkMonitorApi.csproj --os linux --arch x64 /t:PublishContainer -c Release; then
    echo "Failed to publish the Docker container. Exiting..."
    exit 1
fi

# Step 3: Start the container using Docker Compose
if ! docker compose -f "$DOCKER_COMPOSE_FILE" up -d; then
    echo "Failed to start the container using Docker Compose. Exiting..."
    exit 1
fi

# Step 4: Wait for the container to be ready (use a loop instead of sleep)
echo "Waiting for the container to be ready..."
until docker exec -it "$CONTAINER_NAME" bash -c "ls /app" >/dev/null 2>&1; do
    sleep 2
done

# Step 5: Update and install all required packages for standard build  in one apt-get call
docker exec -it "$CONTAINER_NAME" bash -c "apt-get update && apt-get -y install nmap xvfb libatk1.0-0 libatk-bridge2.0-0 libcups2 libxcomposite1 libxrandr2 libxdamage1 libxkbcommon-x11-0 libgbm1 libasound2 libnss3 libgdk-pixbuf2.0-0 libpango1.0-0 libpangoft2-1.0-0 libpangocairo-1.0-0"
docker exec -it "$CONTAINER_NAME" bash -c "cd /app/openssl/bin && ln -s /usr/bin/nmap nmap"

# Step 6: Push both the standard bug version tag
docker commit  "$CONTAINER_NAME" "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"  # Commit to "tag"
docker push "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"  # Push the "tag" tag

# Step 7: Confirm completion
echo "The container is running, and the extra commands have been executed. Image has been pushed to Docker Hub as $DOCKER_IMAGE_FULL and $DOCKER_IMAGE_NAME:latest."

# Step 8: Stop the container using Docker Compose
if ! docker compose -f "$DOCKER_COMPOSE_FILE" down; then
    echo "Failed to stop the container using Docker Compose. Exiting..."
    exit 1
fi

